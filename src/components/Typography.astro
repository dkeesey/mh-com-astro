---
const styles = {
  'exhibition-title': 
    'text-5xl font-light tracking-widest uppercase text-center mb-16 text-primary',
  
  'section-title':
    'text-3xl font-light tracking-wider uppercase text-center mb-12 text-primary',
  
  'section-subtitle':
    'text-2xl font-medium tracking-wide mb-8 text-primary',
  
  'photographer-name':
    'text-xl font-medium tracking-wide uppercase mb-2 text-accent',
  
  'body':
    'text-base leading-relaxed mb-6 text-primary',
  
  'caption':
    'text-sm italic mt-2 text-primary opacity-80',
  
  'link':
    'text-blue-600 hover:text-blue-800 transition-colors underline',
  
  'quote':
    'text-xl italic leading-relaxed tracking-normal text-gray-700 pl-6 border-l-4 border-accent'
} as const;

type StyleVariant = keyof typeof styles;

interface Props {
  as?: keyof HTMLElementTagNameMap;
  variant: StyleVariant;
  class?: string;
}

const { as: Component = 'div', variant, class: className = '' } = Astro.props;

// Use type assertion to tell TypeScript this is a valid key
const styleClass = styles[variant as keyof typeof styles];
const combinedClass = `${styleClass} ${className}`.trim();
---

<Component class={combinedClass}>
  <slot />
</Component>
